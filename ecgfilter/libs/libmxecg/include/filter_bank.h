/**
* Copyright (C) 2017 Maxim Integrated Products, Inc., All rights Reserved.
* * This software is protected by copyright laws of the United States and
* of foreign countries. This material may also be protected by patent laws
* and technology transfer regulations of the United States and of foreign
* countries. This software is furnished under a license agreement and/or a
* nondisclosure agreement and may only be used or reproduced in accordance
* with the terms of those agreements. Dissemination of this information to
* any party or parties not specified in the license agreement and/or
* nondisclosure agreement is expressly prohibited.
*
* The above copyright notice and this permission notice shall be included
* in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL MAXIM INTEGRATED BE LIABLE FOR ANY CLAIM, DAMAGES
* OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* Except as contained in this notice, the name of Maxim Integrated
* Products, Inc. shall not be used except as stated in the Maxim Integrated
* Products, Inc. Branding Policy.
*
* The mere transfer of this software does not imply any licenses
* of trade secrets, proprietary technology, copyrights, patents,
* trademarks, maskwork rights, or any other form of intellectual
* property whatsoever. Maxim Integrated Products, Inc. retains all
* ownership rights.
*******************************************************************************
*/

#ifdef __cplusplus // If this is a C++ compiler, use C linkage
extern "C" {
#endif

#ifndef _FILTER_BANK_H
#define _FILTER_BANK_H


#if defined _WIN32 || defined __CYGWIN__
#define ECG_PRIVATE
#else
#define ECG_PRIVATE __attribute__ ((visibility ("hidden")))
#endif

#include "iir_filter.h"
#include "fir_filter.h"


//#define FOURTH_ORDER

#if defined (FOURTH_ORDER)


static iir_inst filter200Notch60_inst = { //[b0, a0] = butter(4, [56 * 2 / Fs, 64 * 2 / Fs], 'stop'); % 56Hz to 64Hz notch filter
	{ 0.7193595528106442, 1.7924889256448135, 4.5523742025727643, 6.0730633447177409, 7.7743590926364323, 6.0730633447177400, 4.5523742025727643, 1.7924889256448138, 0.7193595528106442 }, //filterNotch b
	{ 1.0, 2.2874792266343822, 5.3106748208210481, 6.5183480470264747, 7.6666445252032105, 5.5301098353757769, 3.8230290575909516, 1.3951674316884692, 0.5174781997880421 }, //filterNotch a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};
static iir_inst filter200Notch50_inst = { //[b0, a0] = butter(4, [46 * 2 / Fs, 54 * 2 / Fs], 'stop'); % 46Hz to 54Hz notch filter
	{ 0.7193595528106432, -0.0000000000000004, 2.8774382112425729, -0.0000000000000011, 4.3161573168638592, -0.0000000000000011, 2.8774382112425729, -0.0000000000000004, 0.7193595528106432 }, //filterNotch b
	{ 1.0, -0.0000000000000009, 3.3440678377118722, -0.0000000000000019, 4.2388639508840624, -0.0000000000000012, 2.4093428565863166, -0.0000000000000003, 0.5174781997880400 }, //filterNotch a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter200Highpass_inst = { //[b1, a1] = butter(4, 0.5 * 2 / Fs, 'high');  % 0.5Hz highpass
	{ 0.979685487190404, -3.91874194876162, 5.87811292314243, -3.91874194876162, 0.979685487190404, 0, 0, 0, 0 },  //filterBandpass b
	{ 1, -3.95895331864708, 5.87770027353615, -3.87853054905174, 0.9597836538115, 0, 0, 0, 0 }, //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter200Bandpass20_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 20 * 2 / Fs], 'bandpass');  % 0.5Hz to 20Hz bandpass
	{ 0.00442537535537200, 0, -0.0177015014214887, 0, 0.0265522521322331, 0, -0.0177015014214887, 0, 0.00442537535537218 },  //filterBandpass b
	{ 1, -6.37716149532780, 17.8592807512525, -28.7464130621935, 29.1351180245230, -19.0579013181797, 7.85837380296398, -1.86700368792868, 0.195706989644591 }, //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter200Bandpass30_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 30 * 2 / Fs], 'bandpass');  % 0.5Hz to 30Hz bandpass
	{ 0.0175769070922659, 0, -0.0703076283690637, 0, 0.105461442553596, 0, -0.0703076283690637, 0, 0.0175769070922659 },  //filterBandpass b
	{ 1, -5.56534816149064, 13.5639528063882, -19.0882985047367, 17.1132355167783, -10.0487809306090, 3.76319356133725, -0.817770524944027, 0.0798162554972743 }, //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};
static iir_inst filter200Bandpass40_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 40 * 2 / Fs], 'bandpass');  % 0.5Hz to 40Hz bandpass
	{ 0.0447672604963331, 0, -0.179069041985333, 0, 0.268603562977999, 0, -0.179069041985333, 0, 0.0447672604963331 },  //filterBandpass b
	{ 1, -4.76660315617430, 9.77844550918653, -11.6066496876750, 9.03765795174437, -4.78931300555125, 1.63112305313221, -0.316133742625907, 0.0314731235121503 }, //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};
static iir_inst filter200Bandpass50_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 50 * 2 / Fs], 'bandpass');  % 0.5Hz to 50Hz bandpass
	{ 0.0910601679540416, 0, -0.364240671816167, 0, 0.546361007724250, 0, -0.364240671816167, 0, 0.0910601679540416 },  //filterBandpass b
	{ 1, -3.97609845896196, 6.43846964624860, -5.93685610236189, 3.96667173287627, -2.03849568034245, 0.606352734931833, -0.0777380369425247, 0.0176942561027941 }, //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};

static iir_inst filter200Bandpass60_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 60 * 2 / Fs], 'bandpass');  % 0.5Hz to 60Hz bandpass
	{ 0.162779717692060, 0, -0.651118870768239, 0, 0.976678306152358, 0, -0.651118870768239, 0, 0.162779717692060 },  //filterBandpass b
	{ 1, -3.18744158330325, 3.50182347622241, -1.85065996148711, 1.27600743447749, -0.957215702080337, 0.133452710488310, 0.0551894658926938, 0.0288443220368640 }, //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter200Bandpass70_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 70 * 2 / Fs], 'bandpass');  % 0.5Hz to 70Hz bandpass
	{ 0.26897750089713, -0, -1.07591000358851, -0, 1.61386500538276, -0, -1.07591000358851, -0, 0.26897750089713 },  //filterBandpass b
	{ 1, -2.39427612192787, 0.95466460364854, 0.76646202348396, 0.53273806575516, -0.89843954429544, -0.20207211311515, 0.16819089246694, 0.07273246025070 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter400Notch60_inst = { //[b0, a0] = butter(4, [56 * 2 / Fs, 64 * 2 / Fs], 'stop'); % 56Hz to 64Hz notch filter
	{ 0.8484752955243485, -3.9976585912011724, 10.4571331477648290, -17.5394719607724770, 20.8506129739080780, -17.5394719607724810, 10.4571331477648270, -3.9976585912011711, 0.8484752955243485 }, //filterNotch b
	{ 1.0, -4.5182449424916804, 11.3314818067441220, -18.2313976187867830, 20.7959413070215010, -16.7935206288535670, 9.6144964194295444, -3.5310979138158798, 0.7199103272918737 }, //filterNotch a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	0,     // group delay
	0,     //clk
};

static iir_inst filter400Notch50_inst = { //[b0, a0] = butter(4, [46 * 2 / Fs, 54 * 2 / Fs], 'stop'); % 46Hz to 54Hz notch filter
	{ 0.8484752955243348, -4.8091909208031707, 13.6159065109809790, -24.0840266154529670, 28.9556846429873040, -24.0840266154529670, 13.6159065109809790, -4.8091909208031707, 0.8484752955243348 }, //filterNotch b
	{ 1.0, -5.4354572957335163, 14.7570273602146160, -25.0390601921396330, 28.8867834084874780, -23.0640000498700100, 12.5207271600056630, -4.2479175347708011, 0.7199103272918721 }, //filterNotch a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	7,     // group delay
	0,     //clk
};

static iir_inst filter400Highpass_inst = { //[b, a] = butter(4, [0.5 * 2 / Fs, 150 * 2 / Fs], 'bandpass');  % 0.5Hz to 150Hz bandpass
	{ 0.342926920451409, 0, -1.37170768180564, 0, 2.05756152270846, 0, -1.37170768180564, 0, 0.342926920451409 },  //filterBandpass b
	{ 1, -2.01301016017947, -0.153097087219407, 1.56304992882364, 0.772371856167986, -1.08582298517190, -0.436405663548067, 0.235203922835460, 0.117710209306208 }, //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass20_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 20 * 2 / Fs], 'bandpass');  % 0.5Hz to 20Hz bandpass
	{ 0.00037979023602, 0, -0.00151916094409, 0, 0.00227874141614, 0, -0.00151916094409, 0, 0.00037979023602 },  //filterBandpass b
	{ 1, -7.19209716436842, 22.66281235445565, -40.87269606212020, 46.15222891479314, -33.41465928269004, 15.14942153142306, -3.93249453110534, 0.44748423963771 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass30_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 30 * 2 / Fs], 'bandpass');  % 0.5Hz to 30Hz bandpass
	{ 0.00168024747174, 0, -0.00672098988696, 0, 0.01008148483044, 0, -0.00672098988696, 0, 0.00168024747174 },  //filterBandpass b
	{ 1, -6.78116936612792, 20.16802920338724, -34.38577768998527, 36.78090772540485, -25.28490278503578, 10.91116363409429, -2.70235098600353, 0.29410026437540 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass40_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 40 * 2 / Fs], 'bandpass');  % 0.5Hz to 40Hz bandpass
	{ 0.00462196559297, 0, -0.01848786237189, 0, 0.02773179355784, 0, -0.01848786237189, 0, 0.00462196559297 },  //filterBandpass b
	{ 1, -6.37336417021557, 17.82575800286222, -28.63713703188994, 28.95137856612847, -18.87991557469995, 7.75713970945340, -1.83536052725234, 0.19150102590912 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	6,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass50_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 50 * 2 / Fs], 'bandpass');  % 0.5Hz to 50Hz bandpass
	{ 0.00987477504882, 0, -0.03949910019528, 0, 0.05924865029293, 0, -0.03949910019528, 0, 0.00987477504882 },  //filterBandpass b
	{ 1, -5.96895792149929, 15.62650441024634, -23.54765523715700, 22.43129827567852, -13.86172911656403, 5.42453528902702, -1.22712094795237, 0.12312524884535 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	5,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass60_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 60 * 2 / Fs], 'bandpass');  % 0.5Hz to 60Hz bandpass
	{ 0.01806553572302, 0, -0.07226214289209, 0, 0.10839321433813, 0, -0.07226214289209, 0, 0.01806553572302 },  //filterBandpass b
	{ 1, -5.56790493972041, 13.56068337127121, -19.04893769637517, 17.03124742893326, -9.96629937217300, 3.71660738276551, -0.80338315338463, 0.07798697981768 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass70_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 70 * 2 / Fs], 'bandpass');  % 0.5Hz to 70Hz bandpass
	{ 0.02979514347275, 0, -0.11918057389101, 0, 0.17877086083651, 0, -0.11918057389101, 0, 0.02979514347275 },  //filterBandpass b
	{ 1, -5.16988860946114, 11.61912325033501, -15.08287243387276, 12.59707244290978, -6.98557954580550, 2.48394500313179, -0.51059758417170, 0.04879747879578 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};

static iir_inst filter800Notch60_inst = { //[b0, a0] = butter(4, [56 * 2 / Fs, 64 * 2 / Fs], 'stop'); % 56Hz to 64Hz notch filter
	{ 0.9211709935039881, -6.5693965214579846, 21.2534785954067720, -40.5903745017851560, 49.9722894884711980, -40.5903745017851560, 21.2534785954067650, -6.5693965214579846, 0.9211709935039881 },  //filterBandpass b
	{ 1.0, -6.9852184627621856, 22.1358752199829210, -41.4122275996932030, 49.9463358533076520, -39.7463699757006380, 20.3908215933214580, -6.1757260079160679, 0.8485559992664792 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter800Notch50_inst = { //[b0, a0] = butter(4, [46 * 2 / Fs, 54 * 2 / Fs], 'stop'); % 46Hz to 54Hz notch filter
	{ 0.9211709934726430, -6.8117694115068383, 22.5737676148468940, -43.7151124309534680, 54.0643695557508010, -43.7151124309534610, 22.5737676148468790, -6.8117694115068357, 0.9211709934726425 },  //filterBandpass b
	{ 1.0, -7.2429327874389378, 23.5111178124072460, -44.6006936447321460, 54.0369319562212950, -42.8065625318570110, 21.6576410074896090, -6.4035747238872673, 0.8485559992664776 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	14,     // group delay
	0,     //clk
};

static iir_inst filter800Highpass_inst = { //[b, a] = butter(4, [0.5*2/Fs, 150*2/Fs], 'bandpass');  % 0.5Hz - 150 Hz Bandpass
	{ 0.0375726724512250, 0, -0.150290689804900, 0, 0.225436034707350, 0, -0.150290689804900, 0, 0.0375726724512250 },  //filterBandpass b
	{ 1, -4.97512289848489, 10.6979431478509, -13.2782971883005, 10.6806938057307, -5.76302647661078, 1.99635441509696, -0.396717182936615, 0.0381723777990020 }, //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass20_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 20 * 2 / Fs], 'bandpass');  % 0.5Hz to 20Hz bandpass
	{ 0.00002836602434, 0, -0.00011346409735, 0, 0.00017019614603, 0, -0.00011346409735, 0, 0.00002836602434 },  //filterBandpass b
	{ 1, -7.59763237420213, 25.26454525896029, -48.02756934040427, 57.08735092112268, -43.44747713218362, 20.67612027387608, -5.62521106793948, 0.66987346077058 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	5,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass30_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 30 * 2 / Fs], 'bandpass');  % 0.5Hz to 30Hz bandpass
	{ 0.00013536589421, 0, -0.00054146357685, 0, 0.00081219536528, 0, -0.00054146357685, 0, 0.00013536589421 },  //filterBandpass b
	{ 1, -7.39176524558055, 23.92356555886347, -44.28385334103660, 51.28005013952449, -38.04117060365550, 17.65533127997485, -4.68712123565256, 0.54496344756295 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	8,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass40_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 40 * 2 / Fs], 'bandpass');  % 0.5Hz to 40Hz bandpass
	{ 0.00013536589421, 0, -0.00054146357685, 0, 0.00081219536528, 0, -0.00054146357685, 0, 0.00013536589421 },  //filterBandpass b
	{ 1, -7.39176524558055, 23.92356555886347, -44.28385334103660, 51.28005013952449, -38.04117060365550, 17.65533127997485, -4.68712123565256, 0.54496344756295 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	12,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass50_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 50 * 2 / Fs], 'bandpass');  % 0.5Hz to 50Hz bandpass
	{ 0.00090049503744, 0, -0.00360198014974, 0, 0.00540297022461, 0, -0.00360198014974, 0, 0.00090049503744 },  //filterBandpass b
	{ 1, -6.98156408176170, 21.36274541101629, -37.43395582549513, 41.09913567022701, -28.95699358851253, 12.78739034205433, -3.23608736340608, 0.35932943588138 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	8,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass60_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 60 * 2 / Fs], 'bandpass');  % 0.5Hz to 60Hz bandpass
	{ 0.00173090956014, 0, -0.00692363824058, 0, 0.01038545736086, 0, -0.00692363824058, 0, 0.00173090956014 },  //filterBandpass b
	{ 1, -6.77743153365408, 20.14091527634523, -34.30438177282770, 36.64830154005334, -25.15729208264391, 10.83821930996338, -2.67933058604355, 0.29099984881409 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	7,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass70_inst = { //[b1, a1] = butter(4, [0.5 * 2 / Fs, 70 * 2 / Fs], 'bandpass');  % 0.5Hz to 70Hz bandpass
	{ 0.00297650384268, 0, -0.01190601537070, 0, 0.01785902305605, 0, -0.01190601537070, 0, 0.00297650384268 },  //filterBandpass b
	{ 1, -6.57404312805144, 18.95669041991190, -31.35722405428466, 32.57847368932762, -21.78344284393619, 9.15627891990658, -2.21184440926040, 0.23511140639824 },  //filterBandpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	6,     // group delay
	0,     //clk
};


static iir_inst filter200Lowpass20_inst = { //[b1, a1] = butter(4, 20 * 2 / Fs, 'low');  % 20Hz lowpass
	{ 0.0048243433577162, 0.0192973734308649, 0.0289460601462974, 0.0192973734308649, 0.0048243433577162, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -2.3695130071820376, 2.3139884144158800, -1.0546654058785676, 0.1873794923681849, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter200Lowpass30_inst = { //[b1, a1] = butter(4, 30 * 2 / Fs, 'low');  % 30Hz lowpass
	{ 0.0185630106268972, 0.0742520425075887, 0.1113780637613830, 0.0742520425075887, 0.0185630106268972, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -1.5703988512281719, 1.2756133249832802, -0.4844033683350859, 0.0761970646103324, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};

static iir_inst filter200Lowpass40_inst = { //[b1, a1] = butter(4, 40 * 2 / Fs, 'low');  % 40Hz lowpass
	{ 0.0465829066364436, 0.1863316265457746, 0.2794974398186619, 0.1863316265457746, 0.0465829066364436, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -0.7820951980233387, 0.6799785269163005, -0.1826756977530327, 0.0301188750431692, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter200Lowpass50_inst = { //[b1, a1] = butter(4, 50 * 2 / Fs, 'low');  % 50Hz lowpass
	{ 0.0939808514337945, 0.3759234057351779, 0.5638851086027669, 0.3759234057351779, 0.0939808514337945, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -0.0000000000000001, 0.4860288220682700, -0.0000000000000000, 0.0176648008724419, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};

static iir_inst filter200Lowpass60_inst = { //[b1, a1] = butter(4, 60 * 2 / Fs, 'low');  % 60Hz lowpass
	{ 0.1671792686084899, 0.6687170744339596, 1.0030756116509394, 0.6687170744339596, 0.1671792686084899, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, 0.7820951980233373, 0.6799785269162992, 0.1826756977530323, 0.0301188750431692, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter200Lowpass70_inst = { //[b1, a1] = butter(4, 70 * 2 / Fs, 'low');  % 70Hz lowpass
	{ 0.2754132880723043, 1.1016531522892172, 1.6524797284338257, 1.1016531522892172, 0.2754132880723043, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, 1.5703988512281715, 1.2756133249832791, 0.4844033683350854, 0.0761970646103324, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass20_inst = { //[b1, a1] = butter(4, 20 * 2 / Fs, 'low');  % 20Hz lowpass
	{ 0.0004165992044066, 0.0016663968176263, 0.0024995952264395, 0.0016663968176263, 0.0004165992044066, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -3.1806385488747209, 3.8611943489942169, -2.1121553551109713, 0.4382651422619805, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass30_inst = { //[b1, a1] = butter(4, 30 * 2 / Fs, 'low');  % 30Hz lowpass
	{ 0.0017826099919254, 0.0071304399677016, 0.0106956599515524, 0.0071304399677016, 0.0017826099919254, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -2.7736823175488672, 3.0190386994238536, -1.5047650514253204, 0.2879304294211404, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass40_inst = { //[b1, a1] = butter(4, 40 * 2 / Fs, 'low');  % 40Hz lowpass
	{ 0.0048243433577162, 0.0192973734308649, 0.0289460601462974, 0.0192973734308649, 0.0048243433577162, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -2.3695130071820376, 2.3139884144158800, -1.0546654058785676, 0.1873794923681849, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	6,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass50_inst = { //[b1, a1] = butter(4, 50 * 2 / Fs, 'low');  % 50Hz lowpass
	{ 0.0102094807912031, 0.0408379231648125, 0.0612568847472188, 0.0408379231648125, 0.0102094807912031, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -1.9684277869385185, 1.7358607092088869, -0.7244708295073629, 0.1203895998962446, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	5,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass60_inst = { //[b1, a1] = butter(4, 60 * 2 / Fs, 'low');  % 60Hz lowpass
	{ 0.0185630106268972, 0.0742520425075887, 0.1113780637613830, 0.0742520425075887, 0.0185630106268972, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -1.5703988512281719, 1.2756133249832802, -0.4844033683350859, 0.0761970646103324, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass70_inst = { //[b1, a1] = butter(4, 70 * 2 / Fs, 'low');  % 70Hz lowpass
	{ 0.0304852698491543, 0.1219410793966170, 0.1829116190949255, 0.1219410793966170, 0.0304852698491543, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -1.1751256376131480, 0.9256487325103825, -0.3104213339399560, 0.0476625566291897, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};


static iir_inst filter800Lowpass20_inst = { //[b1, a1] = butter(4, 20 * 2 / Fs, 'low');  % 20Hz lowpass
	{ 0.0000312389769171, 0.0001249559076684, 0.0001874338615026, 0.0001249559076684, 0.0000312389769171, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -3.5897338871121756, 4.8512758825194169, -2.9240526561624591, 0.6630104843858913, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	5,     // group delay
	0,     //clk
};

static iir_inst filter800Lowpass30_inst = { //[b1, a1] = butter(4, 30 * 2 / Fs, 'low');  % 30Hz lowpass
	{ 0.0001441202240754, 0.0005764808963017, 0.0008647213444525, 0.0005764808963017, 0.0001441202240754, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -3.3849727283038957, 4.3370618174213398, -2.4891382938125446, 0.5393551282803072, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	8,     // group delay
	0,     //clk
};

static iir_inst filter800Lowpass40_inst = { //[b1, a1] = butter(4, 40 * 2 / Fs, 'low');  % 40Hz lowpass
	{ 0.0004165992044066, 0.0016663968176263, 0.0024995952264395, 0.0016663968176263, 0.0004165992044066, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -3.1806385488747209, 3.8611943489942169, -2.1121553551109713, 0.4382651422619805, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	12,     // group delay
	0,     //clk
};

static iir_inst filter800Lowpass50_inst = { //[b1, a1] = butter(4, 50 * 2 / Fs, 'low');  % 50Hz lowpass
	{ 0.0009334986129549, 0.0037339944518194, 0.0056009916777292, 0.0037339944518194, 0.0009334986129549, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -2.9768443336967310, 3.4223095293776362, -1.7861066002180372, 0.3555773823444093, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	8,     // group delay
	0,     //clk
};

static iir_inst filter800Lowpass60_inst = { //[b1, a1] = butter(4, 60 * 2 / Fs, 'low');  % 60Hz lowpass
	{ 0.0017826099919254, 0.0071304399677016, 0.0106956599515524, 0.0071304399677016, 0.0017826099919254, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -2.7736823175488672, 3.0190386994238536, -1.5047650514253204, 0.2879304294211404, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	5,     // group delay
	0,     //clk
};

static iir_inst filter800Lowpass70_inst = { //[b1, a1] = butter(4, 70 * 2 / Fs, 'low');  % 70Hz lowpass
	{ 0.0030512214778501, 0.0122048859114005, 0.0183073288671008, 0.0122048859114005, 0.0030512214778501, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, -2.5712226170517440, 2.6500337583028832, -1.2625931640811763, 0.2326015664756394, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	7,     // group delay
	0,     //clk
};

#else  //2nd order filters

static iir_inst filter200Notch60_inst = { //[b0, a0] = butter(2, [56 * 2 / Fs, 64 * 2 / Fs], 'stop'); % 56Hz to 64Hz notch filter
	{ 0.8370891905663446, 1.0429229013534211, 1.9990207606620278, 1.0429229013534211, 0.8370891905663446, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, 1.1360854939070564, 1.9723023606063148, 0.9497603087997857, 0.7008967811884023, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter200Notch50_inst = { //[b0, a0] = butter(2, [46 * 2 / Fs, 54 * 2 / Fs], 'stop'); % 46Hz to 54Hz notch filter
	{ 0.837089190566345, -2.05027719565585e-16, 1.67417838113269, -2.05027719565585e-16, 0.837089190566345, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -2.4980018054066e-16, 1.64745998107698, -3.33066907387547e-16, 0.700896781188402, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter200Highpass_inst = { //[b1, a1] = butter(2, 0.5 * 2 / Fs, 'high');  % 0.5Hz highpass
	{ 0.9889542480671399, -1.9779084961342799, 0.9889542480671399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.9777864837767638, 0.9780305084917961, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	0,     // group delay
	0,     //clk
};

static iir_inst filter200Bandpass20_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 20 * 2 / Fs], 'bandpass');  % 0.5Hz to 20Hz bandpass
	{ 0.0646422439992614, 0.0, -0.1292844879985229, 0.0, 0.0646422439992614, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.1472051362935867, 3.7222419691899207, -1.9968481603095314, 0.4218783294466460, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter200Bandpass30_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 30 * 2 / Fs], 'bandpass');  % 0.5Hz to 30Hz bandpass
	{ 0.1276235581359668, 0.0, -0.2552471162719335, 0.0, 0.1276235581359668, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -2.7450246974704395, 2.7792752033849948, -1.3116983239483624, 0.2775777576835652, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter200Bandpass40_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 40 * 2 / Fs], 'bandpass');  % 0.5Hz to 40Hz bandpass
	{ 0.2025432346471696, 0.0, -0.4050864692943392, 0.0, 0.2025432346471696, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -2.3610605358157462, 1.9388542388029224, -0.7759236862720652, 0.1983342869586284, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter200Bandpass50_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 50 * 2 / Fs], 'bandpass');  % 0.5Hz to 50Hz bandpass
	{ 0.2883073847383689, 0.0, -0.5766147694767378, 0.0, 0.2883073847383689, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.9869446321064057, 1.1716327462720852, -0.3560317775891390, 0.1716327462720849, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter200Bandpass60_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 60 * 2 / Fs], 'bandpass');  % 0.5Hz to 60Hz bandpass
	{ 0.3860852952537712, 0.0, -0.7721705905075423, 0.0, 0.3860852952537712, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.6138117820520217, 0.4559391065362396, -0.0351677259673156, 0.1934258545906165, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter200Bandpass70_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 70 * 2 / Fs], 'bandpass');  % 0.5Hz to 70Hz bandpass
	{ 0.4988869438064520, 0.0, -0.9977738876129040, 0.0, 0.4988869438064520, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.2328592826416385, -0.2222658753853729, 0.1886112893610838, 0.2670102354496604, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter400Notch60_inst = { //[b0, a0] = butter(2, [56 * 2 / Fs, 64 * 2 / Fs], 'stop'); % 56Hz to 64Hz notch filter
	{ 0.9149691441130812, -2.1554748140234312, 3.0993995874902436, -2.1554748140234312, 0.9149691441130812, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -2.2513662580782796, 3.0921562244603829, -2.0595833699685784, 0.8371816512560182, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter400Notch50_inst = { //[b0, a0] = butter(2, [46 * 2 / Fs, 54 * 2 / Fs], 'stop'); % 46Hz to 54Hz notch filter
	{ 0.9149691441130802, -2.5930403182596091, 3.6671199394821778, -2.5930403182596091, 0.9149691441130802, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -2.7083979086117038, 3.6598765764523304, -2.4776827279075286, 0.8371816512560225, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter400Highpass_inst = { //[b, a] = butter(2, [0.5 * 2 / Fs, 150 * 2 / Fs], 'bandpass');  % 0.5Hz to 150Hz bandpass
	{ 0.5657019687190160, 0.0, -1.1314039374380320, 0.0, 0.5657019687190160, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.0470148204328604, -0.5507903046637259, 0.2680797015538116, 0.3298654615508693, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	0,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass20_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 20 * 2 / Fs], 'bandpass');  % 0.5Hz to 20Hz bandpass
	{ 0.0191827720745797, 0.0000000000000000, -0.0383655441491594, 0.0000000000000000, 0.0191827720745797, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.5673348061220436, 4.7840547900936681, -2.8652212667922154, 0.6485062597675143, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass30_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 30 * 2 / Fs], 'bandpass');  % 0.5Hz to 30Hz bandpass
	{ 0.0400647504123059, 0.0, -0.0801295008246118, 0.0, 0.0400647504123059, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.3530981729283016, 4.2277018916001108, -2.3942791903101357, 0.5196856888362492, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass40_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 40 * 2 / Fs], 'bandpass');  % 0.5Hz to 40Hz bandpass
	{ 0.0660437777416154, 0.0, -0.1320875554832308, 0.0, 0.0660437777416154, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.1451012639871001, 3.7105020815093166, -1.9826968166328021, 0.4173126960907643, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass50_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 50 * 2 / Fs], 'bandpass');  % 0.5Hz to 50Hz bandpass
	{ 0.0960395761580282, 0.0, -0.1920791523160563, 0.0, 0.0960395761580282, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -2.9430983813651048, 3.2273756022532356, -1.6210999662134569, 0.3368468981828682, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass60_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 60 * 2 / Fs], 'bandpass');  % 0.5Hz to 60Hz bandpass
	{ 0.1293613748176449, 0.0, -0.2587227496352899, 0.0, 0.1293613748176449, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -2.7464182345912560, 2.7735373823118570, -1.3019631829984397, 0.2748764520042042, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Bandpass70_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 70 * 2 / Fs], 'bandpass');  % 0.5Hz to 70Hz bandpass
	{ 0.1655996707708516, 0.0, -0.3311993415417031, 0.0, 0.1655996707708516, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -2.5541602334957143, 2.3446483649468064, -1.0193283607719790, 0.2288816185919409, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter800Notch60_inst = { //[b0, a0] = butter(2, [56 * 2 / Fs, 64 * 2 / Fs], 'stop'); % 56Hz to 64Hz notch filter
	{ 0.9565432255568646, -3.4108280563060638, 4.9536568401078735, -3.4108280563060633, 0.9565432255568646, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.4866225422151063, 4.9517674564202583, -3.3350335703971106, 0.9149758348014345, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter800Notch50_inst = { //[b0, a0] = butter(2, [46 * 2 / Fs, 54 * 2 / Fs], 'stop'); % 46Hz to 54Hz notch filter
	{ 0.9565432255568476, -3.5366679643640593, 5.1821546845114925, -3.5366679643640584, 0.9565432255568473, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.6152588302080755, 5.1802653008239581, -3.4580770985202420, 0.9149758348014295, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	8,     // group delay
	0,     //clk
};

static iir_inst filter800Highpass_inst = { //[b, a] = butter(2, [0.5*2/Fs, 150*2/Fs], 'bandpass');  % 0.5Hz - 150 Hz Bandpass
	{ 0.1857179309429708, 0.0, -0.3714358618859416, 0.0, 0.1857179309429708, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -2.4611589551333095, 2.1369642966975095, -0.8862909010093923, 0.2104970831173235, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass20_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 20 * 2 / Fs], 'bandpass');  % 0.5Hz to 20Hz bandpass
	{ 0.0052826299555710, 0.0, -0.0105652599111420, 0.0, 0.0052826299555710, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.7829621654860839, 5.3713070601792534, -3.3936065850712520, 0.8052620331269699, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass30_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 30 * 2 / Fs], 'bandpass');  % 0.5Hz to 30Hz bandpass
	{ 0.0114941259029180, 0.0, -0.0229882518058360, 0.0, 0.0114941259029180, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.6729392793626454, 5.0667622622359225, -3.1144455771461441, 0.7206233274132744, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass40_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 40 * 2 / Fs], 'bandpass');  % 0.5Hz to 40Hz bandpass
	{ 0.0196310017700367, 0.0, -0.0392620035400734, 0.0, 0.0196310017700367, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.5641773410711686, 4.7737163566835354, -2.8544566412022188, 0.6449188671237270, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	5,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass50_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 50 * 2 / Fs], 'bandpass');  % 0.5Hz to 50Hz bandpass
	{ 0.0294254745319041, 0.0, -0.0588509490638082, 0.0, 0.0294254745319041, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.4568458857493569, 4.4916028885123858, -2.6120042294445156, 0.5772490781696604, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass60_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 60 * 2 / Fs], 'bandpass');  % 0.5Hz to 60Hz bandpass
	{ 0.0406575752223172, 0.0, -0.0813151504446343, 0.0, 0.0406575752223172, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.3510344969929395, 4.2198077805133076, -2.3855963379818421, 0.5168256039635312, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter800Bandpass70_inst = { //[b1, a1] = butter(2, [0.5 * 2 / Fs, 70 * 2 / Fs], 'bandpass');  % 0.5Hz to 70Hz bandpass
	{ 0.0531473328322535, 0.0, -0.1062946656645070, 0.0, 0.0531473328322535, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -3.2467723093576302, 3.9576963812169312, -2.1738802696096369, 0.4629595222833632, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};


static iir_inst filter200Lowpass20_inst = { //[b1, a1] = butter(2, 20 * 2 / Fs, 'low');  % 20Hz lowpass
	{ 0.0674552738890719, 0.1349105477781437, 0.0674552738890719, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.1429805025399014, 0.4128015980961888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter200Lowpass30_inst = { //[b1, a1] = butter(2, 30 * 2 / Fs, 'low');  % 30Hz lowpass
	{ 0.1311064399166259, 0.2622128798332519, 0.1311064399166259, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -0.7477891782585034, 0.2722149379250072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter200Lowpass40_inst = { //[b1, a1] = butter(2, 40 * 2 / Fs, 'low');  % 40Hz lowpass
	{ 0.2065720838261479, 0.4131441676522958, 0.2065720838261479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -0.3695273773512415, 0.1958157126558331, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter200Lowpass50_inst = { //[b1, a1] = butter(2, 50 * 2 / Fs, 'low');  % 50Hz lowpass
	{ 0.2928932188134524, 0.5857864376269049, 0.2928932188134524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -0.0000000000000004, 0.1715728752538100, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter200Lowpass60_inst = { //[b1, a1] = butter(2, 60 * 2 / Fs, 'low');  % 60Hz lowpass
	{ 0.3913357725017686, 0.7826715450035372, 0.3913357725017686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, 0.3695273773512413, 0.1958157126558331, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter200Lowpass70_inst = { //[b1, a1] = butter(2, 70 * 2 / Fs, 'low');  % 70Hz lowpass
	{ 0.5050010290458776, 1.0100020580917553, 0.5050010290458776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, 0.7477891782585033, 0.2722149379250072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass20_inst = { //[b1, a1] = butter(2, 20 * 2 / Fs, 'low');  % 20Hz lowpass
	{ 0.0200833655642113, 0.0401667311284225, 0.0200833655642113, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.5610180758007179, 0.6413515380575630, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass30_inst = { //[b1, a1] = butter(2, 30 * 2 / Fs, 'low');  % 30Hz lowpass
	{ 0.0412535372417203, 0.0825070744834406, 0.0412535372417203, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.3489677452527942, 0.5139818942196754, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass40_inst = { //[b1, a1] = butter(2, 40 * 2 / Fs, 'low');  % 40Hz lowpass
	{ 0.0674552738890719, 0.1349105477781437, 0.0674552738890719, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.1429805025399014, 0.4128015980961888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass50_inst = { //[b1, a1] = butter(2, 50 * 2 / Fs, 'low');  % 50Hz lowpass
	{ 0.0976310729378175, 0.1952621458756350, 0.0976310729378175, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -0.9428090415820634, 0.3333333333333334, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass60_inst = { //[b1, a1] = butter(2, 60 * 2 / Fs, 'low');  % 60Hz lowpass
	{ 0.1311064399166259, 0.2622128798332519, 0.1311064399166259, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -0.7477891782585034, 0.2722149379250072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	2,     // group delay
	0,     //clk
};

static iir_inst filter400Lowpass70_inst = { //[b1, a1] = butter(2, 70 * 2 / Fs, 'low');  % 70Hz lowpass
	{ 0.1674838001270168, 0.3349676002540336, 0.1674838001270168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -0.5570309973117509, 0.2269661978198181, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	1,     // group delay
	0,     //clk
};


static iir_inst filter800Lowpass20_inst = { //[b1, a1] = butter(2, 20 * 2 / Fs, 'low');  % 20Hz lowpass
	{ 0.0055427172102807, 0.0110854344205614, 0.0055427172102807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.7786317778245850, 0.8008026466657078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};

static iir_inst filter800Lowpass30_inst = { //[b1, a1] = butter(2, 30 * 2 / Fs, 'low');  % 30Hz lowpass
	{ 0.0118576826432412, 0.0237153652864823, 0.0118576826432412, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.6692031429311931, 0.7166338735041578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter800Lowpass40_inst = { //[b1, a1] = butter(2, 40 * 2 / Fs, 'low');  % 40Hz lowpass
	{ 0.0200833655642113, 0.0401667311284225, 0.0200833655642113, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.5610180758007179, 0.6413515380575630, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter800Lowpass50_inst = { //[b1, a1] = butter(2, 50 * 2 / Fs, 'low');  % 50Hz lowpass
	{ 0.0299545822080925, 0.0599091644161849, 0.0299545822080925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.4542435862515846, 0.5740619150839544, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter800Lowpass60_inst = { //[b1, a1] = butter(2, 60 * 2 / Fs, 'low');  % 60Hz lowpass
	{ 0.0412535372417203, 0.0825070744834406, 0.0412535372417203, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.3489677452527942, 0.5139818942196754, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	4,     // group delay
	0,     //clk
};

static iir_inst filter800Lowpass70_inst = { //[b1, a1] = butter(2, 70 * 2 / Fs, 'low');  % 70Hz lowpass
	{ 0.0538020791021596, 0.1076041582043192, 0.0538020791021596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter b
	{ 1.0, -1.2452189123904240, 0.4604272287990625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	IIR_ORDER,     //order
	3,     // group delay
	0,     //clk
};

/* Filters for HSP sampling rates */

/* Notch Filters */
/* 125 SPS */
static iir_inst filter125Notch50_inst = {  //[b, a] = butter(2,[2*47/Fs, 2*53/Fs],'stop')  % 47 to 53 Hz notch
	{ 0.807768, 2.643998, 3.779130, 2.643998, 0.807768, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 2.928083, 3.741829, 2.359914, 0.652838, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter125Notch60_inst = {  //[b, a] = butter(2,[2*5.75/Fs, 2*6.25/Fs],'stop')  % 5.75 to 6.25 Hz notch
	{ 0.840077, 3.359251, 5.038349, 3.359251, 0.840077, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 3.653264, 5.012607, 3.065238, 0.705894, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter125Notch25_inst = {  //[b, a] = butter(2,[2*22/Fs, 2*28/Fs],'stop')  % 22 to 28 Hz notch - 25Hz notch to filter aliased 100Hz at 125SPS - use with caution!
	{ 0.807768, -1.009918, 1.931201, -1.009918, 0.807768, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.118428, 1.893900, -0.901407, 0.652838, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

/* 128 SPS */
static iir_inst filter128Notch50_inst = {  //[b, a] = butter(2,[2*47/Fs, 2*53/Fs],'stop')  % 47 to 53 Hz notch
	{ 0.811832, 2.537684, 3.606784, 2.537684, 0.811832, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 2.803860, 3.571058, 2.271508, 0.659390, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter128Notch52_inst = {  //[b, a] = butter(2,[2*49/Fs, 2*55/Fs],'stop')  % 49 to 55 Hz notch
	{ 0.811832, 2.729597, 3.918074, 2.729597, 0.811832, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 3.015903, 3.882348, 2.443292, 0.659390, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter128Notch60_inst = {  //[b, a] = butter(2,[2*57/Fs, 2*63/Fs],'stop')  % 57 to 63 Hz notch
	{ 0.811832, 3.219780, 4.816130, 3.219780, 0.811832, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 3.557500, 4.780403, 2.882059, 0.659390, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

/* 200, 199.8 SPS*/
static iir_inst filter200Notch100_inst = {  //[b, a] = butter(2, 2*97/Fs,'low')  % 97 Hz lowpass in lieu of 100Hz notch at 200SPS
	{ 0.935527, 1.871053, 0.935527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 1.866892, 0.875215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter200Notch80_inst = {  //[b, a] = butter(2,[2*77/Fs, 2*83/Fs],'stop')  % 77 to 83 Hz notch - Aliased 120 Hz notch for 200SPS.
	{ 0.875183, 2.844777, 4.062099, 2.844777, 0.875183, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 3.034926, 4.046458, 2.654629, 0.766007, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter200Notch20_inst = {  //[b, a] = butter(2,[2*17/Fs, 2*23/Fs],'stop')  % 17 to 23 Hz notch - Aliased 180 Hz for 200SPS. Do Not Use unless absolutely have to!
	{ 0.875183, -2.844777, 4.062099, -2.844777, 0.875183, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -3.034926, 4.046458, -2.654629, 0.766007, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

/* 250 SPS*/
static iir_inst filter250Notch50_inst = {  //[b, a] = butter(2,[2*47/Fs, 2*53/Fs],'stop')  % 47 to 53 Hz notch
	{ 0.898846, -1.114200, 2.142979, -1.114200, 0.898846, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.173716, 2.132720, -1.054684, 0.807950, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter250Notch60_inst = {  //[b, a] = butter(2,[2*57/Fs, 2*63/Fs],'stop')  % 57 to 63 Hz notch
	{ 0.898846, -0.226399, 1.811947, -0.226399, 0.898846, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.238492, 1.801689, -0.214306, 0.807950, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter250Notch100_inst = {  //[b, a] = butter(2,[2*97/Fs, 2*103/Fs],'stop')  % 97 to 103 Hz notch - can also be used to filter aliased 150Hz at 250SPS
	{ 0.898846, 2.917013, 4.164328, 2.917013, 0.898846, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 3.072827, 4.154069, 2.761198, 0.807950, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter250Notch120_inst = {  //[b, a] = butter(2,[2*117/Fs, 2*123/Fs],'stop')  % 117 to 123 Hz notch
	{ 0.898846, 3.577195, 5.356790, 3.577195, 0.898846, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 3.768274, 5.346532, 3.386116, 0.807950, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter250Notch70_inst = {  //[b, a] = butter(2,[2*67/Fs, 2*73/Fs],'stop')  % 67 to 73 Hz notch - Aliased 180Hz for 250SPS
	{ 0.898846, 0.675627, 1.924652, 0.675627, 0.898846, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 0.711716, 1.914393, 0.639538, 0.807950, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

/* 256 SPS */
static iir_inst filter256Notch50_inst = {  //[b, a] = butter(2,[2*47/Fs, 2*53/Fs],'stop')  % 47 to 53 Hz notch
	{ 0.901096, -1.217579, 2.213496, -1.217579, 0.901096, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.281087, 2.203690, -1.154071, 0.811998, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter256Notch52_inst = {  //[b, a] = butter(2,[2*49/Fs, 2*55/Fs],'stop')  % 49 to 55 Hz notch
	{ 0.901096, -1.049140, 2.107568, -1.049140, 0.901096, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.103862, 2.097762, -0.994418, 0.811998, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter256Notch60_inst = {  //[b, a] = butter(2,[2*57/Fs, 2*63/Fs],'stop')  % 57 to 63 Hz notch
	{ 0.901096, -0.354251, 1.837009, -0.354251, 0.901096, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.372729, 1.827203, -0.335774, 0.811998, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter256Notch100_inst = {  //[b, a] = butter(2,[2*97/Fs, 2*103/Fs],'stop')  % 97 to 103 Hz notch
	{ 0.901096, 2.793796, 3.967693, 2.793796, 0.901096, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 2.939518, 3.957887, 2.648073, 0.811998, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter256Notch120_inst = {  //[b, a] = butter(2,[2*117/Fs, 2*123/Fs],'stop')  % 117 to 123 Hz notch
	{ 0.901096, 3.544731, 5.288257, 3.544731, 0.901096, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 3.729622, 5.278451, 3.359840, 0.811998, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

/* 500 SPS */
static iir_inst filter500Notch50_inst = {  //[b, a] = butter(2,[2*47/Fs, 2*53/Fs],'stop')  % 47 to 53 Hz notch
	{ 0.948081, -3.070235, 4.381800, -3.070235, 0.948081, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -3.152118, 4.379103, -2.988352, 0.898859, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter500Notch60_inst = {  //[b, a] = butter(2,[2*57/Fs, 2*63/Fs],'stop')  % 57 to 63 Hz notch
	{ 0.948081, -2.766450, 3.914251, -2.766450, 0.948081, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -2.840231, 3.911553, -2.692669, 0.898859, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter500Notch100_inst = {  //[b, a] = butter(2,[2*97/Fs, 2*103/Fs],'stop')  % 97 to 103 Hz notch
	{ 0.948081, -1.172726, 2.258811, -1.172726, 0.948081, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.204002, 2.256114, -1.141449, 0.898859, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter500Notch120_inst = {  //[b, a] = butter(2,[2*117/Fs, 2*123/Fs],'stop')  % 117 to 123 Hz notch
	{ 0.948081, -0.238291, 1.911135, -0.238291, 0.948081, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.244646, 1.908437, -0.231936, 0.898859, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter500Notch150_inst = {  //[b, a] = butter(2,[2*147/Fs, 2*153/Fs],'stop')  % 147 to 153 Hz notch
	{ 0.948081, 1.172726, 2.258811, 1.172726, 0.948081, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 1.204002, 2.256114, 1.141449, 0.898859, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter500Notch180_inst = {  //[b, a] = butter(2,[2*177/Fs, 2*183/Fs],'stop')  % 177 to 183 Hz notch
	{ 0.948081, 2.419037, 3.439210, 2.419037, 0.948081, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 2.483552, 3.436512, 2.354521, 0.898859, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};


/* 512 SPS */
static iir_inst filter512Notch50_inst = { //[b, a] = butter(2,[2*47/Fs, 2*53/Fs],'stop')  % 47 to 53 Hz notch
	{ 0.949266, -3.106528, 4.440105, -3.106528, 0.949266, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -3.187435, 4.437529, -3.025621, 0.901108, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter512Notch52_inst = {  //[b, a] = butter(2,[2*49/Fs, 2*55/Fs],'stop')  % 49 to 55 Hz notch
	{ 0.949266, -3.051899, 4.351503, -3.051899, 0.949266, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -3.131384, 4.348928, -2.972415, 0.901108, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter512Notch60_inst = {  //[b, a] = butter(2,[2*57/Fs, 2*63/Fs],'stop')  % 57 to 63 Hz notch
	{ 0.949266, -2.815347, 3.985982, -2.815347, 0.949266, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -2.888671, 3.983406, -2.742024, 0.901108, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter512Notch100_inst = {  //[b, a] = butter(2,[2*97/Fs, 2*103/Fs],'stop')  % 97 to 103 Hz notch
	{ 0.949266, -1.280060, 2.330064, -1.280060, 0.949266, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.313398, 2.327489, -1.246722, 0.901108, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter512Notch120_inst = {  //[b, a] = butter(2,[2*117/Fs, 2*123/Fs],'stop')  % 117 to 123 Hz notch
	{ 0.949266, -0.372430, 1.935062, -0.372430, 0.949266, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.382130, 1.932486, -0.362730, 0.901108, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter512Notch150_inst = {  //[b, a] = butter(2,[2*147/Fs, 2*153/Fs],'stop')  % 147 to 153 Hz notch
	{ 0.949266, 1.013412, 2.169006, 1.013412, 0.949266, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 1.039806, 2.166430, 0.987019, 0.901108, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter512Notch180_inst = {  //[b, a] = butter(2,[2*177/Fs, 2*183/Fs],'stop')  % 177 to 183 Hz notch
	{ 0.949266, 2.263443, 3.247778, 2.263443, 0.949266, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 2.322393, 3.245203, 2.204493, 0.901108, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	5,    //order
	0,    //group delay
	0     //clk
};


/* Low Pass filters */
/* 125 SPS */
static iir_inst filter125Lowpass20_inst = {  //[b, a] = butter(2, 2*20/Fs,'low')  % 20 Hz lowpass
	{ 0.14532, 0.29065, 0.14532, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.67103, 0.25232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter125Lowpass30_inst = {  //[b, a] = butter(2, 2*30/Fs,'low')  % 30 Hz lowpass
	{ 0.274727, 0.549454, 0.274727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.073624, 0.172531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter125Lowpass40_inst = {  //[b, a] = butter(2, 2*40/Fs,'low')  % 40 Hz lowpass
	{ 0.434739, 0.869479, 0.434739, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 0.519303, 0.219654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter125Lowpass50_inst = {  //[b, a] = butter(2, 2*50/Fs,'low')  % 50 Hz lowpass
	{ 0.638946, 1.277891, 0.638946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 1.142981, 0.412802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	0,    //group delay
	0     //clk
};

static iir_inst filter125Lowpass60_inst = {  //[b, a] = butter(2, 2*60/Fs,'low')  % 60 Hz lowpass
	{ 0.914969, 1.829938, 0.914969, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 1.822695, 0.837182, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	0,    //group delay
	0     //clk
};

/* 128 SPS */
static iir_inst filter128Lowpass20_inst = {  //[b, a] = butter(2, 2*20/Fs,'low')  % 20 Hz lowpass
	{ 0.13994, 0.27988, 0.13994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.69974, 0.2595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter128Lowpass30_inst = {  //[b, a] = butter(2, 2*30/Fs,'low')  % 30 Hz lowpass
	{ 0.264713, 0.529425, 0.264713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.115064, 0.173914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter128Lowpass40_inst = {  //[b, a] = butter(2, 2*40/Fs,'low')  % 40 Hz lowpass
	{ 0.418163, 0.836327, 0.418163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 0.462938, 0.209715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter128Lowpass50_inst = {  //[b, a] = butter(2, 2*50/Fs,'low')  % 50 Hz lowpass
	{ 0.611981, 1.223961, 0.611981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 1.067264, 0.380659, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter128Lowpass60_inst = {  //[b, a] = butter(2, 2*60/Fs,'low')  % 60 Hz lowpass
	{ 0.870331, 1.740662, 0.870331, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 1.723776, 0.757547, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	0,    //group delay
	0     //clk
};

/* 250 SPS */
static iir_inst filter250Lowpass20_inst = {  //[b, a] = butter(2, 2*20/Fs,'low')  % 20 Hz lowpass
	{ 0.046132, 0.092264, 0.046132, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.3073, 0.49181, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	3,    //group delay
	0     //clk
};

static iir_inst filter250Lowpass30_inst = {  //[b, a] = butter(2, 2*30/Fs,'low')  % 30 Hz lowpass
	{ 0.091315, 0.182630, 0.091315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.982406, 0.347665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	2,    //group delay
	0     //clk
};

static iir_inst filter250Lowpass40_inst = {  //[b, a] = butter(2, 2*40/Fs,'low')  % 40 Hz lowpass
	{ 0.145324, 0.290648, 0.145324, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.671029, 0.252325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter250Lowpass50_inst = {  //[b, a] = butter(2, 2*50/Fs,'low')  % 50 Hz lowpass
	{ 0.206572, 0.413144, 0.206572, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.369527, 0.195816, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter250Lowpass60_inst = {  //[b, a] = butter(2, 2*60/Fs,'low')  % 60 Hz lowpass
	{ 0.274727, 0.549454, 0.274727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.073624, 0.172531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter250Lowpass70_inst = {  //[b, a] = butter(2, 2*70/Fs,'low')  % 70 Hz lowpass
	{ 0.350346, 0.700693, 0.350346, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 0.221153, 0.180232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

/* 256 SPS */
static iir_inst filter256Lowpass20_inst = {  //[b, a] = butter(2, 2*20/Fs,'low')  % 20 Hz lowpass
	{ 0.04428, 0.08855, 0.04428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.3229, 0.50001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	3,    //group delay
	0     //clk
};

static iir_inst filter256Lowpass30_inst = {  //[b, a] = butter(2, 2*30/Fs,'low')  % 30 Hz lowpass
	{ 0.087821, 0.175643, 0.087821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.004772, 0.356057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	2,    //group delay
	0     //clk
};

static iir_inst filter256Lowpass40_inst = {  //[b, a] = butter(2, 2*40/Fs,'low')  % 40 Hz lowpass
	{ 0.139939, 0.279879, 0.139939, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.699738, 0.259495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	2,    //group delay
	0     //clk
};

static iir_inst filter256Lowpass50_inst = {  //[b, a] = butter(2, 2*50/Fs,'low')  % 50 Hz lowpass
	{ 0.199040, 0.398080, 0.199040, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.404485, 0.200644, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter256Lowpass60_inst = {  //[b, a] = butter(2, 2*60/Fs,'low')  % 60 Hz lowpass
	{ 0.264713, 0.529425, 0.264713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.115064, 0.173914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

static iir_inst filter256Lowpass70_inst = {  //[b, a] = butter(2, 2*70/Fs,'low')  % 70 Hz lowpass
	{ 0.337382, 0.674764, 0.337382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, 0.172680, 0.176849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

/* 500 SPS */
static iir_inst filter500Lowpass20_inst = {  //[b, a] = butter(2, 2*20/Fs,'low')  % 20 Hz lowpass
	{ 0.013359, 0.026718, 0.013359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.6475, 0.7009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	6,    //group delay
	0     //clk
};

static iir_inst filter500Lowpass30_inst = {  //[b, a] = butter(2, 2*30/Fs,'low')  % 30 Hz lowpass
	{ 0.027860, 0.055720, 0.027860, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.475480, 0.586920, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	4,    //group delay
	0     //clk
};

static iir_inst filter500Lowpass40_inst = {  //[b, a] = butter(2, 2*40/Fs,'low')  % 40 Hz lowpass
	{ 0.046132, 0.092264, 0.046132, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.307285, 0.491812, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	3,    //group delay
	0     //clk
};

static iir_inst filter500Lowpass50_inst = {  //[b, a] = butter(2, 2*50/Fs,'low')  % 50 Hz lowpass
	{ 0.067455, 0.134911, 0.067455, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.142981, 0.412802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	2,    //group delay
	0     //clk
};

static iir_inst filter500Lowpass60_inst = {  //[b, a] = butter(2, 2*60/Fs,'low')  % 60 Hz lowpass
	{ 0.091315, 0.182630, 0.091315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.982406, 0.347665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	2,    //group delay
	0     //clk
};

static iir_inst filter500Lowpass70_inst = {  //[b, a] = butter(2, 2*70/Fs,'low')  % 70 Hz lowpass
	{ 0.117351, 0.234702, 0.117351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.825232, 0.294637, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	1,    //group delay
	0     //clk
};

/* 512 SPS */
static iir_inst filter512Lowpass20_inst = {  //[b, a] = butter(2, 2*20/Fs,'low')  % 20 Hz lowpass
	{ 0.012787, 0.025575, 0.012787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.6556, 0.70676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	6,    //group delay
	0     //clk
};

static iir_inst filter512Lowpass30_inst = {  //[b, a] = butter(2, 2*30/Fs,'low')  % 30 Hz lowpass
	{ 0.026707, 0.053414, 0.026707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.487452, 0.594281, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	5,    //group delay
	0     //clk
};

static iir_inst filter512Lowpass40_inst = {  //[b, a] = butter(2, 2*40/Fs,'low')  % 40 Hz lowpass
	{ 0.044280, 0.088559, 0.044280, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.322887, 0.500006, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	4,    //group delay
	0     //clk
};

static iir_inst filter512Lowpass50_inst = {  //[b, a] = butter(2, 2*50/Fs,'low')  % 50 Hz lowpass
	{ 0.064817, 0.129634, 0.064817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.162037, 0.421305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	2,    //group delay
	0     //clk
};

static iir_inst filter512Lowpass60_inst = {  //[b, a] = butter(2, 2*60/Fs,'low')  % 60 Hz lowpass
	{ 0.087821, 0.175643, 0.087821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -1.004772, 0.356057, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	2,    //group delay
	0     //clk
};

static iir_inst filter512Lowpass70_inst = {  //[b, a] = butter(2, 2*70/Fs,'low')  % 70 Hz lowpass
	{ 0.112942, 0.225883, 0.112942, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter b
	{ 1.0, -0.850803, 0.302569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filter a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,    //order
	2,    //group delay
	0     //clk
};

#endif

static fir_taps edgeDetect = { 0, 0, { 0, 0, 0, 0, 0 } };

static fir_taps CIC_compensator = { 0, 0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };

static iir_inst dc_Notch_inst1 = { //default H(z) = 1;
	{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst dc_Notch_inst2 = { //default H(z) = 1;
	{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst dc_Notch_inst3 = { //default H(z) = 1;
	{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,     //order
	1,     // group delay
	0,     //clk
};

static iir_inst dc_Notch_inst4 = { //default H(z) = 1;
	{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass b
	{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //filterLowpass a
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //input_hist[]
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },  //output_hist[]
	3,     //order
	1,     // group delay
	0,     //clk
};

#endif


#ifdef __cplusplus // If this is a C++ compiler, use C linkage
}
#endif